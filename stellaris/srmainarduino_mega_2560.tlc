%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 
%% 
%%
%% Abstract:
%%   Custom file processing to generate a "main" file.
%%
%% Copyright 2012 The MathWorks, Inc.
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%selectfile NULL_FILE

%function SLibCreateMain(mainFileName) void
  
  %assign cFile = LibCreateSourceFile("Source", "Custom", mainFileName)

  %assign tgtData = FEVAL("get_param", CompiledModel.Name, "TargetExtensionData")
  %assign isDetectOverrun = tgtData.Enable_overrun_detection
  %assign overrunPin = tgtData.Digital_output_to_set_on_overrun
  %assign serial0BaudRate = tgtData.Serial0_baud_rate
  %assign serial1BaudRate = tgtData.Serial1_baud_rate
  %assign serial2BaudRate = tgtData.Serial2_baud_rate
  %assign serial3BaudRate = tgtData.Serial3_baud_rate
  %assign analogInputRefV = tgtData.Analog_input_reference_voltage

  %openfile tmpBuf
  #include "%<LibGetMdlPubHdrBaseName()>.h"
  #include "Arduino.h"
  %if ExtMode
    #include <ext_work.h>          /* External mode header files */
    #include <ext_svr.h>
    #include <ext_share.h>
    #include <updown.h>
  %endif
  %closefile tmpBuf
  
  %<LibSetSourceFileSection(cFile, "Includes", tmpBuf)>

  %openfile tmpBuf  

  %assign SAMPLETIME = CompiledModel.FundamentalStepSize

  %if SAMPLETIME < 0.000001
      %<LibReportError("The minimum supported sample time is 1 microsecond. Change the Sample time parameter in blocks that that use incorrect sample times.")>
  %elseif SAMPLETIME > 4294967
      %<LibReportError("The maximum supported sample time is 4294967 seconds. Change the Sample time parameter in blocks that that use incorrect sample times.")>
  %endif

  %% Calculate if the sample time can be measured in microseconds given the
  %% usnsigned long counter of the micros() Arduino library function
  %% The maximum sample time is: (2^32-1) / 1000000 
  %assign TIMEINMICROS = (SAMPLETIME < 4294)

  %if (TIMEINMICROS)
    #define STEP_SIZE (unsigned long) (%<CAST("Number", SAMPLETIME * 1000000)>)
    %assign TFUNC = "micros()"
  %else
    #define STEP_SIZE (unsigned long) (%<CAST("Number", SAMPLETIME * 1000)>)
    %assign TFUNC = "millis()"
  %endif

  %closefile tmpBuf

  %<LibSetSourceFileSection(cFile, "Declarations", tmpBuf)>
  
  %openfile tmpBuf
  
  int_T main(void)
  {
    unsigned long oldtime = 0L;
    unsigned long actualtime;
    
    init();
    
    %if ExtMode
        /* initialize external mode */
        rtParseArgsForExtMode(0, NULL);
    %endif

    %if MultiInstanceERTCode && !GenerateClassInterface 
        %% Pack model data into RTM 
        %<FcnPackModelDataIntoRTM()> 
    %endif

    %<LibCallModelInitialize()>\

    %if ExtMode
        %<SLibGenERTExtModeInit()>
    %endif 

    %if (isDetectOverrun==1)
        /* This pin indicates the base rate overrun */
        pinMode(%<overrunPin>, OUTPUT);
    %endif

  %if !ExtMode
    #ifdef _RTT_USE_SERIAL0_
      Serial_begin(0, %<serial0BaudRate>); 
    #endif
  %endif
    #ifdef _RTT_USE_SERIAL1_
        Serial_begin(1, %<serial1BaudRate>); 
    #endif
    #ifdef _RTT_USE_SERIAL2_
        Serial_begin(2, %<serial2BaudRate>); 
    #endif
    #ifdef _RTT_USE_SERIAL3_
        Serial_begin(3, %<serial3BaudRate>);
    #endif
    
    %switch (analogInputRefV)
        %case 1
            analogReference(INTERNAL1V1);
            %break
        %case 2
            analogReference(INTERNAL2V56);
            %break
        %case 3
            analogReference(EXTERNAL);
            %break
        %default
            %% DEFAULT case
    %endswitch

    /* The main step loop */
    while (%<ERTStopCheck()>) {
      actualtime = %<TFUNC>;
      if ((unsigned long) (actualtime - oldtime) >= STEP_SIZE) {
        oldtime = actualtime;
        %if ExtMode
 	            %<FcnGenerateExtModeOneStep()>
        %endif
		    %<LibCallModelStep(0)>\
        %if ExtMode
                rtExtModeCheckEndTrigger();
        %endif
            %if (isDetectOverrun==1)
          /* Check for overrun */
          if ((unsigned long) (%<TFUNC> - oldtime) > STEP_SIZE) {
                digitalWrite(%<overrunPin>, 1);
          }
            %endif
        }
    }
    %if ExtMode
    rtExtModeShutdown(%<NumSynchronousSampleTimes>);
      %% This delay ensures that the serial data are sent
    delay(1000);
    %endif
    %<LibCallModelTerminate()>\
    return 0;
  }

  %closefile tmpBuf
  
  %<LibSetSourceFileSection(cFile, "Functions", tmpBuf)>
  
%endfunction
